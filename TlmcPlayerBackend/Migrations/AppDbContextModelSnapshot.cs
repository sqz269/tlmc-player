// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TlmcPlayerBackend.Data;
using TlmcPlayerBackend.Models.MusicData;

#nullable disable

namespace TlmcPlayerBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlbumCircle", b =>
                {
                    b.Property<Guid>("AlbumArtistId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumsId")
                        .HasColumnType("uuid");

                    b.HasKey("AlbumArtistId", "AlbumsId");

                    b.HasIndex("AlbumsId");

                    b.ToTable("AlbumCircle");
                });

            modelBuilder.Entity("OriginalTrackTrack", b =>
                {
                    b.Property<string>("OriginalId")
                        .HasColumnType("text");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("OriginalId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("OriginalTrackTrack");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("text");

                    b.Property<List<string>>("DataSource")
                        .HasColumnType("text[]");

                    b.Property<string>("DiscName")
                        .HasColumnType("text");

                    b.Property<int?>("DiscNumber")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<LocalizedField>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int?>("NumberOfDiscs")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentAlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReleaseConvention")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Website")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ParentAlbumId");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mime")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Circle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Alias")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<List<string>>("DataSource")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("Established")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Circles");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.CircleWebsite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CircleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Invalid")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CircleId");

                    b.ToTable("CircleWebsites");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.HlsPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Bitrate")
                        .HasColumnType("integer");

                    b.Property<string>("HlsPlaylistPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("HlsPlaylist");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.HlsSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("HlsPlaylistId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HlsPlaylistId");

                    b.ToTable("HlsSegment");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.OriginalAlbum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ExternalReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalizedField>("FullName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<LocalizedField>("ShortName")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OriginalAlbums");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.OriginalTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlbumId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("text");

                    b.Property<LocalizedField>("Title")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("OriginalTracks");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Thumbnail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Colors")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("LargeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OriginalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SmallId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TinyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LargeId");

                    b.HasIndex("MediumId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("SmallId");

                    b.HasIndex("TinyId");

                    b.ToTable("Thumbnails");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Arrangement")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("Disc")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<List<string>>("Genre")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Lyricist")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<LocalizedField>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool?>("OriginalNonTouhou")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Staff")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid?>("TrackFileId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Vocalist")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("TrackFileId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.Playlist.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTracks")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.Playlist.PlaylistItem", b =>
                {
                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<int>("TimesPlayed")
                        .HasColumnType("integer");

                    b.HasKey("TrackId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.UserProfile.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("AlbumCircle", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Circle", null)
                        .WithMany()
                        .HasForeignKey("AlbumArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OriginalTrackTrack", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.OriginalTrack", null)
                        .WithMany()
                        .HasForeignKey("OriginalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Album", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Asset", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Album", "ParentAlbum")
                        .WithMany("ChildAlbums")
                        .HasForeignKey("ParentAlbumId");

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Thumbnail", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId");

                    b.Navigation("Image");

                    b.Navigation("ParentAlbum");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Asset", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Album", null)
                        .WithMany("OtherFiles")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.CircleWebsite", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Circle", "Circle")
                        .WithMany("Website")
                        .HasForeignKey("CircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circle");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.HlsPlaylist", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.HlsSegment", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.HlsPlaylist", "HlsPlaylist")
                        .WithMany("Segments")
                        .HasForeignKey("HlsPlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HlsPlaylist");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.OriginalTrack", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.OriginalAlbum", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Thumbnail", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Asset", "Large")
                        .WithMany()
                        .HasForeignKey("LargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Asset", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Asset", "Original")
                        .WithMany()
                        .HasForeignKey("OriginalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Asset", "Small")
                        .WithMany()
                        .HasForeignKey("SmallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Asset", "Tiny")
                        .WithMany()
                        .HasForeignKey("TinyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Large");

                    b.Navigation("Medium");

                    b.Navigation("Original");

                    b.Navigation("Small");

                    b.Navigation("Tiny");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Track", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Asset", "TrackFile")
                        .WithMany()
                        .HasForeignKey("TrackFileId");

                    b.Navigation("Album");

                    b.Navigation("TrackFile");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.Playlist.Playlist", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.UserProfile.UserProfile", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.Playlist.PlaylistItem", b =>
                {
                    b.HasOne("TlmcPlayerBackend.Models.Playlist.Playlist", "Playlist")
                        .WithMany("Tracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TlmcPlayerBackend.Models.MusicData.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Album", b =>
                {
                    b.Navigation("ChildAlbums");

                    b.Navigation("OtherFiles");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.Circle", b =>
                {
                    b.Navigation("Website");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.HlsPlaylist", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.MusicData.OriginalAlbum", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("TlmcPlayerBackend.Models.Playlist.Playlist", b =>
                {
                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
